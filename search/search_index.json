{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"FINAL FANTASY XVI Modding","text":"<ul> <li> <p> Modding Tutorials</p> <p>Tutorials for installing and creating mods.</p> <p> Installing Mods</p> <p> Creating Mods</p> </li> <li> <p> Tutorials for Modders</p> <p>Pack Extraction, and more.</p> <p> Extracting Files</p> <p> Extracting Textures</p> <p> Nex (NXD) Editing</p> </li> <li> <p> Resources &amp; Info for Modders</p> <p>Resources, etc.</p> <p> File Tree/Asset Paths</p> </li> <li> <p> Discord</p> <p>Join the Discord for mods, guidance &amp; more!</p> <p></p> </li> <li> <p> Support / Contributing</p> <p>Support our work to allow us to make more things possible!</p> <p> Nenkai</p> <p> Improving the site</p> </li> </ul>"},{"location":"contributing/","title":"Contributing","text":"<p>If you're like to improve the site, the repository is available here! Feel free to help out in any way.</p> <p>Everything uses easy-to-write markdown for documentation with a few additions that you can see in the Mkdocs Material reference.</p> <p>Visual Studio Code is recommended to easily edit and preview in real-time.</p> <p>Tip</p> <p>Feel free to join the Discord for guidance if needed.</p>"},{"location":"modding/creating_mods/","title":"Creating Mods","text":""},{"location":"modding/creating_mods/#creating-mods-for-the-ffxvi-mod-loader","title":"Creating Mods for the FFXVI Mod Loader","text":"<p>Once you have modded assets you'd like to mod into the game:</p> <ol> <li>First, follow the Reloaded II Creating Mods tutorial for general information about creating a mod for Reloaded-II.</li> <li>Set the <code>FINAL FANTASY XVI Mod Loader as a dependency</code>. Reloaded-II will prompt you to set mod dependencies when creating the mod.</li> <li>Your mod's assets must be contained within the <code>FFXVI/data</code> folder. Example:</li> </ol> <p>Example</p> <pre><code>.\n\u251c\u2500 ff16.&lt;category&gt;.&lt;mymodname&gt;/\n\u2502  \u2514\u2500 FFXVI/\n\u2502     \u2514\u2500 data/\n\u2502        \u2514\u2500 0007/ # &lt;- Your pack must match the original pack name. 0007 is an example.\n\u2502           \u2502\n\u2502           \u251c\u2500 .path  # IMPORTANT: This file is needed if there is one present.\n\u2502           \u2514\u2500 &lt;files to mod for this pack&gt;\n\u2502\n\u251c\u2500 ModConfig.json\n\u2514\u2500 ...\n</code></pre> <p>Warning</p> <p>You should preferably ALWAYS include the <code>.path</code> file if it was present. </p> <p>Template/Sample Mod</p> <p> An example mod can be found here. This changes the bottom-left text of the main title screen to add \"Hello World\".</p> <p>If you have successfully gotten your mod to work, congratulations!</p>"},{"location":"modding/creating_mods/#creating-mods-for-manual-installation","title":"Creating Mods for Manual Installation","text":"<p>Refer to Modding Manually on the Installing Mods page.</p>"},{"location":"modding/creating_mods/#publishing-mods-guidelines","title":"Publishing Mods &amp; Guidelines","text":"<p>Nexus Mods is the primary website to publish mods.</p>"},{"location":"modding/installing_mods/","title":"Mod Manager","text":"<p>The Reloaded II mod manager combined with the FINAL FANTASY XVI Mod Loader is the primary way to manage mods for FFXVI. </p> <p>It quickly handles what would normally be a multi-step process with <code>FF16.Tools</code> for all managed mods.</p>"},{"location":"modding/installing_mods/#requirements","title":"Requirements","text":"<ul> <li> Reloaded-II Mod Manager</li> <li> ff16.utility.modloader (Mod Loader) -  Github Mirror</li> <li> 7-Zip to extract Reloaded-II (if not using the setup)</li> </ul>"},{"location":"modding/installing_mods/#video-tutorial","title":"Video Tutorial","text":""},{"location":"modding/installing_mods/#text-tutorial","title":"Text Tutorial","text":""},{"location":"modding/installing_mods/#setting-up-reloaded-ii","title":"Setting up Reloaded-II","text":"<ol> <li>Download Reloaded-II's <code>Release.zip</code>, or <code>Setup.exe</code>.</li> <li>Extract <code>Release.zip</code> to its own folder or run the <code>Setup.exe</code> and install it.</li> <li>Open <code>Reloaded-II.exe</code>.</li> <li>Press the <code>+</code> Icon to add a game and select <code>ffxvi.exe</code>.</li> <li>Drag &amp; Drop <code>ff16.utility.modloader.7z</code> to Reloaded-II. You may need to restart Reloaded-II to be able to drag-drop.</li> <li>In Reloaded-II make sure to tick on the checkbox next to <code>FINAL FANTASY XVI / 16 Mod Loader</code> to enable it.</li> </ol> <p>Info</p> <p>For more information if needed, refer to the Reloaded II Quick Start Guide.</p>"},{"location":"modding/installing_mods/#installing-mods","title":"Installing Mods","text":"<ol> <li>Download a mod. You can find mods on sites like Nexus Mods and GameBanana. Make sure that they are compatible with Reloaded-II.</li> <li>Same process, drag &amp; drop.</li> <li>Press <code>Launch Application</code> to launch the game and install the mods.</li> </ol>"},{"location":"modding/installing_mods/#removing-mods","title":"Removing Mods","text":"<p>To remove mods, you can either:</p> <ul> <li>Disable all mods in Reloaded-II except the Mod Loader, and boot up once, or</li> <li>Delete any <code>.diff</code> files in the game's <code>data/</code> folder.</li> </ul>"},{"location":"modding/installing_mods/#modding-manually","title":"Modding Manually","text":"<p>Warning</p> <p>If you intend to publish mods, you should create mods for Reloaded-II instead of modding manually. Otherwise pack files may conflict.</p> <p>If you'd like to mod contents manually, you can do so using FF16Tools.</p> <p>You may choose to rebuild a <code>.pac</code> entirely, or preferably you can use <code>.diff.pac</code> files.</p> <p>When packing an extracted folder, the output pack file should have <code>.diff</code> in its name. The game will load this file.</p> <p>So if your files came from <code>0000.pac</code>, the new pac file should be <code>0000.diff.pac</code>. </p> <p>Then run the following command: Command<pre><code>FF16Tools.exe pack -i &lt;path to folder&gt; \n</code></pre></p>"},{"location":"modding/mod_loader/","title":"Mod Loader Internals","text":""},{"location":"modding/mod_loader/#main-process","title":"Main Process","text":"<p>The internal mod loader process is documented here.</p> <ol> <li>When launching, the mod loader will immediately remove any <code>.diff</code> pack files present in the game's <code>data</code> directory. <code>.diff.pac</code> files essentially extend the base content with extra/modded contents. Cleaning it first means starting from a fresh state.</li> <li>Every mod loaded by Reloaded-II which has a <code>FFXVI</code> folder will be picked up by the loader and keep track of every file per-pack.<ul> <li>When mod files conflict, the last loaded one has priority.</li> </ul> </li> <li>Once Reloaded-II has alerted the mod loader that all mods have been loaded, the mod loader will merge every files provided for each pack by mods. The mod loader will begin to build each pack with FF16Tools and save them as <code>.diff.pac</code> files in the game's <code>data</code> folder.</li> </ol> <p>Which means, file mods will persist when booting without Reloaded-II. However, Reloaded-II can also consist of code-based mods, so it is always recommended to boot through it.</p>"},{"location":"modding/mod_loader/#implementation-caveats","title":"Implementation Caveats","text":"<p>All packs are basically just a mounted file-system. In theory any pack can include any folder/file in the game. </p> <p>At first the idea of not having folders per pack was obvious, but one problem is that localization works with localization-specific packs. There is no clear way to detect how to build localized contents without having pack specific folders.</p>"},{"location":"resources/asset_paths/","title":"File Tree/Asset Paths","text":"<p>Each pack corresponds to a different game folder.</p> <pre><code>// Main Game Packs\n\"0000\" # animation\n\"0001\" # chara\n\"0002\" # cut\n\"0004\" # gracommon\n\"0006\" # movie\n\"0007\" # nxd\n\"0008\" # shader\n\"0009\" # sound/battle\n\"0010\" # sound/chara\n\"0011\" # sound/cut\n\"0014\" # sound/driverconfig\n\"0015\" # sound/env\n\"0016\" # sound/masts\n\"0017\" # sound/movie\n\"0018\" # sound/music\n\"0019\" # sound/physics\n\"0020\" # sound/sevoice\n\"0021\" # sound/ui\n\"0022\" # sound/vfx\n\"0023\" # sound/vibration\n\"0024\" # sound/voice\n\"0026\" # stageset\n\"0027\" # system\n\"0028\" # ui\n\"0029\" # vfx\n\"0101\" # env/basic\n\"0102\" # env/bgparts\n\"0103\" # env/grassset\n\"0106\" # env/shader\n\"0107\" # env/speedtree\n\"0108\" # env/splinerope\n\"0109\" # env/stageset\n\"0112\" # env/terrain/a\n\"0113\" # env/terrain/b\n\"0114\" # env/terrain/c\n\"0115\" # env/terrain/d\n\"0116\" # env/terrain/e\n\"0117\" # env/terrain/t\n\"0118\" # env/terrain/w\n\"0201\" # map/a\n\"0202\" # map/b\n\"0203\" # map/c\n\"0204\" # map/d\n\"0205\" # map/e\n\"0206\" # map/t\n\"0207\" # map/w\n\"0208\" # map/movie\n\"0209\" # map/titl\n\n# DLC 2 (Echoes of the Fallen)\n\"2000\" #\n\"2001\" # movie/dlc2\n\"2002\" # nxd/text/dlc2\n\"2003\" # sound/voice/dlc2\n\n# DLC 3 (The Rising Tide)\n\"3000\" -\n\"3001\" # movie/dlc3\n\"3002\" # nxd/text/dlc3\n\"3003\" # sound/voice/dlc3\n</code></pre>"},{"location":"resources/formats/nxd/","title":"Nex - <code>.nxd</code>","text":"<p>Originally in Excel form, Nex (Next ExcelDB) are database table files. SQEX converts them into a binary format (<code>.nxd</code>) - sister of FF14's <code>.exd</code> but with less metadata and little endian.</p> <p>These files are located in the <code>nxd</code> folder. (<code>0007</code> packs).</p> <p>Unlike <code>exd</code>, there are no column metadata whatsoever. No names, no cell fields. All had to be manually mapped.</p> <ul> <li>.exd Documentation</li> <li>010 Editor Template</li> <li>Reference Implementation (FF16Tools, C#)</li> <li>Table Layouts</li> </ul> <p>Additionally, row data itself can contain nested structures or arrays.</p> <p>Note</p> <p>Ids are also always ordered due to binary search use.</p>"},{"location":"resources/formats/nxd/#header","title":"Header","text":"<pre><code>struct\n{\n    uint32_t magic &lt;format=hex&gt;; // 'NXDF'\n    uint32_t version; // 1\n    enum // uint8_t\n    {\n        NEX_ROWTYPE_SINGLEKEYED = 1, // 1 key\n        NEX_ROWTYPE_DOUBLEKEYED = 2, // 2 keys\n        NEX_ROWTYPE_TRIPLEKEYED = 3, // 3 keys\n    } type;\n\n    enum // uint8_t\n    {\n        NEX_SINGLEKEYED_UNLOCALIZED = 1,\n        NEX_SINGLEKEYED_LOCALIZED = 2,\n        NEX_DOUBLEKEYED_UNLOCALIZED = 3,\n        NEX_DOUBLEKEYED_LOCALIZED = 4,\n        NEX_TRIPLEKEYED_ROWS_UNLOCALIZED = 5,\n        NEX_TRIPLEKEYED_ROWS_LOCALIZED = 6\n    } category;\n\n    // Determines whether to use the baseRowId for searching.\n    // if baseRowId is 1, searching for row id 0 will return the first row.\n    bool usesBaseRowId; \n    uint8_t _reserved1_;\n    uint32_t baseRowId;\n    uint32_t _reserved2_[0x4];\n} NexDataFileHeader; // size: 0x20\n</code></pre> <p>Following the main header, another header follows depending on the type of table.</p>"},{"location":"resources/formats/nxd/#type-1-single-keyed","title":"Type 1 (Single-Keyed)","text":"<p>Simple rows with only one key.</p> <pre><code>struct\n{\n    int32_t rowInfosOffset; // Offset to a list of row infos for each row\n    uint32_t numRows;\n} NexSingleKeyedTableHeader;\n</code></pre> <pre><code>struct\n{\n    uint32_t rowID;\n    int32_t rowDataOffset; // Relative to start of row info.\n} NexSingleKeyedTableRowInfo;\n</code></pre>"},{"location":"resources/formats/nxd/#type-2-double-keyed","title":"Type 2 (Double-keyed)","text":"<p>Rows, with two keys.</p>"},{"location":"resources/formats/nxd/#nexdoublekeyedtableheader","title":"NexDoubleKeyedTableHeader","text":"<pre><code>struct\n{\n    uint32_t thisHeaderSize; // Also used as an offset relative to this for NexDoubleKeyedSetInfo[].\n    uint32_t setCount; // Number of sets in this table.\n    uint32_t reserved;\n    int32_t rowsInfoOffset; // Points to another list of the data for each row (not row set).\n    uint32_t totalRowCount; // Total number of rows in this table.\n} NexDoubleKeyedTableHeader;\n</code></pre>"},{"location":"resources/formats/nxd/#nexdoublekeyedsetinfo","title":"NexDoubleKeyedSetInfo","text":"<pre><code>struct\n{\n    uint32_t key; // main row id/set id.\n    int32_t rowInfosOffset; // Offset to NexDoubleKeyedRowInfo[], relative to this structure.\n    uint32_t arrayLength; // Number of rows for this set.\n} NexDoubleKeyedSetInfo;\n</code></pre>"},{"location":"resources/formats/nxd/#nexdoublekeyedrowinfo","title":"NexDoubleKeyedRowInfo","text":"<pre><code>struct\n{\n    uint32_t key;\n    uint32_t key2;\n    int32_t rowDataOffset; // Relative to this structure.\n} NexDoubleKeyedRowInfo;\n</code></pre>"},{"location":"resources/formats/nxd/#nexrowinfo","title":"NexRowInfo","text":"<pre><code>struct\n{\n    uint32_t key;\n    uint32_t key2; // array index, or key2.\n    int32_t rowDataOffset; // Relative to this structure. May be negative (reverse offset).\n} NexRowInfo;\n</code></pre>"},{"location":"resources/formats/nxd/#type-3-triple-keyed-sets","title":"Type 3 (Triple-Keyed Sets)","text":"<p>Rows sets, with three keys.</p>"},{"location":"resources/formats/nxd/#nextriplekeyedtableheader","title":"NexTripleKeyedTableHeader","text":"<pre><code>struct\n{\n    uint32_t thisHeaderSize;  // Also used as an offset relative to this for NexTripleKeyedSetInfo[].\n    uint32_t count; // Number of triple-keyed sets in this table.\n    int32_t rowInfoOffset;\n    int32_t rowsInfoOffset; // Points to another list of the data for each row.\n    uint32_t totalRowCount; // Total number of rows in this table.\n} NexTripleKeyedTableHeader;\n</code></pre>"},{"location":"resources/formats/nxd/#nextriplekeyedsetinfo","title":"NexTripleKeyedSetInfo","text":"<pre><code>struct\n{\n    uint32_t key; // Main row id.\n    uint32_t subRowSetInfoOffset; // Offset to NexTripleKeyedSubSetInfo[], relative to this structure.\n    uint32_t numSubKeys; // Number of sub row keys.\n    uint32_t unkOffset; // Unknown, never used.\n    uint32_t unkAlways0; // Unknown, possible count for above, never used.\n} NexTripleKeyedSetInfo;\n</code></pre>"},{"location":"resources/formats/nxd/#nextriplekeyedsubsetinfo","title":"NexTripleKeyedSubSetInfo","text":"<pre><code>struct\n{\n    uint32_t key2; // or key2.\n    uint32_t unkOffset; // Unknown, never used.\n    uint32_t unkAlways0; // Unknown, possible count for above, never used.\n    int32_t rowInfosOffset; // Offset to NexTripleKeyedRowInfo[], relative.\n    uint32_t numRows; // Number of rows for this subset.\n} NexTripleKeyedSubSetInfo;\n</code></pre>"},{"location":"resources/formats/nxd/#nextriplekeyedrowinfo","title":"NexTripleKeyedRowInfo","text":"<pre><code>struct\n{\n    uint32_t key;\n    uint32_t key2; // or key2.\n    uint32_t key3; // array index, or key3.\n    uint32_t unkAlways0; // Unknown, never used.\n    int32_t rowDataOffset; // Relative to this structure. May be negative (reverse offset).\n} NexRowInfo;\n</code></pre>"},{"location":"resources/formats/pac/","title":"Pack - <code>.pac</code>","text":"<p>The pack is the main holder for the data in FINAL FANTASY XVI. It is custom made for FFXVI and designed around DirectStorage.</p> <p>Packs are split per game folder in general. You can find a list here.</p> <p>The game will always try to load a <code>.diff</code> variant file for every single pack. File entries present in there will be appended on top of the base package.</p> <ul> <li>010 Editor Template</li> <li>Reference Implementation (FF16Tools, C#)</li> </ul>"},{"location":"resources/formats/pac/#header","title":"Header","text":"<pre><code>struct\n{\n    uint64_t Magic // PACK\n    uint32_t HeaderSize; // Size of the Header/TOC\n    uint32_t NumFiles;\n    bool UsesChunks;\n    bool Encrypted; // If true, DirectoryName and the string table is encrypted.\n    uint16_t NumChunks;\n    uint64_t PackSize; // Total Size\n\n    // Important: Main directory of the pack. Any file will be a sub-file of this.\n    uint8_t DirectoryName[0x100];\n\n    uint64_t ChunkTableOffset; // To DirectStorageSharedChunkInfo[]\n    uint64_t StringTableOffset;\n    uint64_t StringTableSize;\n    uint8_t Padding[0x2D0]; // Padding until 0x400\n} PackHeader; // size: 0x400\n</code></pre>"},{"location":"resources/formats/pac/#file-infos","title":"File Infos","text":"<p>Starting at <code>0x400</code>: array of <code>FileInfo</code></p> <pre><code>typedef enum\n{\n    None,\n    UseSpecificChunk, // File is stored in a single GDeflate chunk\n    UseMultipleChunks, // File is stored within multiple GDeflate chunks\n    UseSharedChunk // File is stored in a chunk where multiple files reside\n} FileChunkedCompressionFlags;\n\nstruct\n{\n    uint32_t CompressedFileSize &lt;format=hex&gt;;\n    bool IsCompressed;\n    FileChunkedCompressionFlags ChunkedCompressionFlags; // uint8\n    uint16_t Empty;\n    uint64_t DecompressedFileSize &lt;format=hex&gt;;\n    // To GDeflate compressed data (if compressed). \n    // If UseMultipleChunks is used, points to a header (see DirectStorageMultiChunkHeader)\n    uint64_t DataOffset &lt;format=hex&gt;; \n    uint64_t ChunkDefOffset &lt;format=hex&gt;;\n    uint64_t FileNameOffset &lt;format=hex&gt;;\n    uint32_t FileNameHash; // FNV Hash, NOT FNV1A\n    uint32_t CRC32Checksum; // Of the decompressed data\n    uint32_t Empty;\n    uint32_t ChunkHeaderSize &lt;format=hex&gt;; // 0x18 if UseSharedChunk, variable if UseMultipleChunks\n} FileInfo; // size: 0x48\n</code></pre>"},{"location":"resources/formats/pac/#directstoragesharedchunkinfo","title":"DirectStorageSharedChunkInfo","text":"<p>Represents a GDeflate-compressed chunk, which houses multiple files.</p> <p>A shared chunk is never more than <code>0x400000</code> in size, and never has files larger than <code>0x100000</code>.</p> <p>This is used by files marked with <code>FileChunkedCompressionFlags.UseSharedChunk</code>.</p> <pre><code>struct\n{\n    uint64_t DataOffset;\n    uint32_t CompressedChunkSize;\n    uint32_t ChunkDecompressedSize;\n    uint32_t Empty;\n    uint16_t ChunkIndex;\n    uint16_t NumFilesInChunk;\n} DirectStorageSharedChunkInfo; // size: 0x18\n</code></pre>"},{"location":"resources/formats/pac/#directstoragemultichunkheader","title":"DirectStorageMultiChunkHeader","text":"<p>Multiple chunks for a single file is used when a file is at least <code>0x2000000</code> (32Mb).</p> <pre><code>struct\n{\n    uint32_t NumChunks;\n    uint32_t LastChunkSize; // High 8 bits may be for something different?\n    uint32_t ChunkOffsets[NumChunks];\n} DirectStorageMultiChunkHeader;\n</code></pre>"},{"location":"resources/formats/pac/#decryption","title":"Decryption","text":"<pre><code>public const ulong XOR_KEY = 0x49D18FC870F3824E;\n\npublic static void CryptHeaderPart(Span&lt;byte&gt; data)\n{\n    Span&lt;byte&gt; cur = data;\n    while (cur.Length &gt;= 8)\n    {\n        MemoryMarshal.Cast&lt;byte, ulong&gt;(cur)[0] ^= XOR_KEY;\n        cur = cur[8..];\n    }\n\n    if (cur.Length &gt;= 4)\n    {\n        MemoryMarshal.Cast&lt;byte, uint&gt;(cur)[0] ^= (uint)(XOR_KEY &amp; 0xFFFFFFFF);\n        cur = cur[4..];\n    }\n\n    if (cur.Length &gt;= 2)\n    {\n        MemoryMarshal.Cast&lt;byte, ushort&gt;(cur)[0] ^= (ushort)(XOR_KEY &amp; 0xFFFF);\n        cur = cur[2..];\n    }\n\n    if (cur.Length &gt;= 1)\n        cur[0] ^= (byte)(XOR_KEY &amp; 0xFF);\n}\n</code></pre>"},{"location":"tutorials/file_extraction/","title":"File Extraction","text":""},{"location":"tutorials/file_extraction/#game-files","title":"Game Files","text":"<p>Tip</p> <p>The game folder can be found under <code>&lt;Steam Folder&gt;\\steamapps\\common\\FINAL FANTASY XVI</code>.</p> <p>You should be able to find the following files/folders:</p> <ul> <li><code>data/</code> - This is where the game data resides. Data is split between packs which correspond to different folders in the game. You can refer to this list to find out which pack corresponds to which folder.</li> </ul>"},{"location":"tutorials/file_extraction/#extracting-files","title":"Extracting Files","text":""},{"location":"tutorials/file_extraction/#requirements","title":"Requirements","text":"<ul> <li> .NET 8.0</li> <li> FF16Tools</li> </ul>"},{"location":"tutorials/file_extraction/#extracting-all-files","title":"Extracting all files","text":""},{"location":"tutorials/file_extraction/#gui-graphical-version","title":"GUI (Graphical version)","text":"<p>Open <code>FF16Tools.Pack.GUI.exe</code>. You will be presented with options to extract packs.</p>"},{"location":"tutorials/file_extraction/#cli-command-line-version","title":"CLI (Command-Line version)","text":"<p>Open a command prompt in the folder where <code>FF16Tools.CLI.exe</code> is, and then run the following command:</p> Example Command - Extract all files<pre><code>FF16Tools.CLI.exe unpack-all -i &lt;path to .pac file&gt;\n</code></pre> <p>Note</p> <p>Replace <code>&lt;path to .pac file&gt;</code> with the path to an actual <code>.pac</code> file, (surrounded by double-quotes <code>\"</code> if it contains spaces).</p> <p>It may take some time to extract all files depending on the size.</p>"},{"location":"tutorials/nex/nxd_editing/","title":"Nex (NXD) Conversion","text":"<p>Nex files are pretty much the database of the game. Originally in Excel form, SQEX converts them into a binary format named <code>.nxd</code> (sister of FF14's <code>.exd</code>).</p>"},{"location":"tutorials/nex/nxd_editing/#requirements","title":"Requirements","text":"<ul> <li> FF16Tools - It is recommended to always use the latest version as column names will be renamed.</li> <li> SQLiteStudio</li> </ul>"},{"location":"tutorials/nex/nxd_editing/#converting-to-sqlite","title":"Converting to SQLite","text":"<p>Using <code>FF16Tools.CLI</code>, run the following command:</p> <pre><code>FF16Tools.CLI nxd-to-sqlite -i &lt;path to directory with nxd&gt;\n</code></pre> <p>This will convert all the <code>.nxd</code>'s in a directory to a SQLite database you can open with SQLiteStudio.</p>"},{"location":"tutorials/nex/nxd_editing/#converting-back-to-nex","title":"Converting back to Nex","text":"<pre><code>FF16Tools.CLI sqlite-to-nxd -i &lt;path to sqlite file&gt;\n</code></pre> <p>Tip</p> <p>You can provide the <code>-t</code> argument to only convert certain tables. for instance, <code>-t equipitem command</code> will only save <code>equipitem.nxd</code> and <code>command.nxd</code>.</p> <p>Note</p> <ul> <li>Refer to the table layouts here for the column value types. Note: this has been mapped mostly manually. Please contribute! Many columns are still unknown.</li> <li>Always check the Changelog for updated table column names.</li> <li>Nex can contain nested data, therefore arrays and other structs are converted to json strings.</li> <li>Nex can contain row sets that don't actually contain any rows. This information is lost between SQLite conversion, but should hopefully not matter.</li> <li>You may need to edit <code>root.nxl</code> to reflect the number of rows (if you've added/removed any).</li> </ul>"},{"location":"tutorials/textures/texture_extraction/","title":"Texture Extraction","text":"<p>Most textures in the game are contained within <code>.tex</code> files.</p> <ol> <li>If you don't already have it, get FF16Tools.</li> <li>To extract textures, simply drop any <code>.tex</code> file (or folders) into <code>FF16Tools.CLI.exe</code>. A folder will be created.</li> </ol> <p>Tip</p> <p>You can also use the command-line way with <code>tex-conv</code> if you'd like. </p>"}]}